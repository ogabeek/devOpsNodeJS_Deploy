name: CD – Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install --production

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        id: tf
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.AWS_REGION }}
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Get EC2 IP
        id: ec2
        working-directory: terraform 

        run: |
          # grab only the raw IP
          IP=$(terraform output -raw instance_public_ip)

          # sanity check: exit early if empty
          if [ -z "$IP" ]; then
            echo "❌ instance_public_ip is empty! Did terraform output fail?" >&2
            exit 1
          fi

          # write exactly one valid line into GITHUB_OUTPUT
          echo "instance_public_ip=$IP" >> $GITHUB_OUTPUT

      - name: Package app
        run: tar czf app.tar.gz index.js node_modules package.json Dockerfile

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.TARGET_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Copy app & service file to EC2
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no \
            app.tar.gz nodeapp.service \
            ${{ secrets.SSH_USER }}@${{ steps.ec2.outputs.ip }}:/home/ubuntu/

      - name: Deploy on EC2 & restart service
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ steps.ec2.outputs.ip }} << 'EOF'
            mkdir -p /home/ubuntu/devOpsNodeJS_Deploy
            tar xzf /home/ubuntu/app.tar.gz -C /home/ubuntu/devOpsNodeJS_Deploy
            sudo mv /home/ubuntu/nodeapp.service /etc/systemd/system/nodeapp.service
            sudo systemctl daemon-reload
            sudo systemctl enable nodeapp.service
            sudo systemctl restart nodeapp.service
            touch /home/ubuntu/Cheeek.txt
          EOF

      - name: Deploy Docker container on EC2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ steps.ec2.outputs.ip }} << 'EOF'
            sudo systemctl stop nodeapp.service || true
            mkdir -p /home/ubuntu/devOpsNodeJS_Deploy
            tar xzf /home/ubuntu/app.tar.gz -C /home/ubuntu/devOpsNodeJS_Deploy
            cd /home/ubuntu/devOpsNodeJS_Deploy
            if ! command -v docker > /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
              sudo usermod -aG docker ubuntu
            fi
            sudo docker build -t nodejs-sample .
            sudo docker stop nodeapp || true
            sudo docker rm nodeapp || true
            sudo docker run -d --name nodeapp \
              -p 4444:4444 \
              --restart unless-stopped \
              nodejs-sample
          EOF
